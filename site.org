#+HUGO_BASE_DIR: .
#+MACRO: uva @@hugo:{{<UVa2 number="$1" >}}@@

* Videos
:PROPERTIES:
:HUGO_SECTION: videos
:EXPORT_HUGO_SECTION: videos
:END:

** Area of Polygon
:PROPERTIES:
:EXPORT_FILE_NAME: area_of_polygon_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/AreaOfPolygon.mp4"}></source>
#+HTML: </video>

** Convex Hull Video
:PROPERTIES:
:EXPORT_FILE_NAME: convex_hull_video
:ID:       543f2489-0289-4a2e-b210-03e78cd7501c
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/ConvexHull.mp4"}></source>
#+HTML: </video>

** Line Sweep Convex Hull
:PROPERTIES:
:EXPORT_FILE_NAME: line_sweep_convex_hull_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/LineSweepConvexHull.mp4"}></source>
#+HTML: </video>

** Line Sweep Closest Points
:PROPERTIES:
:EXPORT_FILE_NAME: line_sweep_closest_points_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/LineSweepClosestPoints.mp4"}></source>
#+HTML: </video>

** Line Sweep Area of Union
:PROPERTIES:
:EXPORT_FILE_NAME: line_sweep_area_of_union_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/LineSweepAreaOfUnion.mp4"}></source>
#+HTML: </video>

** Edit Distance Video
:PROPERTIES:
:EXPORT_FILE_NAME: edit_distance_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/EditDistance.mp4"}></source>
#+HTML: </video>

** Naive Matching Video
:PROPERTIES:
:EXPORT_FILE_NAME: naive_matching_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/NaiveMatch.mp4"}></source>
#+HTML: </video>

** KMP Matching Video
:PROPERTIES:
:EXPORT_FILE_NAME: kmp_matching_video
:END:

#+HTML: <video id="my-video" controls preload="auto" width="720" data-setup="playbackRates: [0.5,1,1.5,2]">
#+HTML:   <source type="video/mp4" src="/videos/KMPMatch.mp4"}></source>
#+HTML: </video>

* Course Documentation
:PROPERTIES:
:HUGO_SECTION: docs
:EXPORT_HUGO_SECTION: docs
:END:

** Welcome
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1 :date 2022-08-22 :publishdate 2022-07-01
:END:

Welcome to Competitive Programming!  In this class you will learn how to compete in programming contests such as ICPC,
Code Forces, and Hacker Rank.  *Is this class for you?  Read on to find out...*

*** What Are the Benefits of Competitive Programming?

Participating in coding contests has benefits!

  You will
  - build confidence in your coding skills,
  - increase your coding speed,
  - be ready to crush a coding interview,
  - and quite possibly make some friends!

*** But... I'm not very competitive, and besides, I'll never beat those top students!

That doesn't matter!  Whether you are just starting out or whether you are competing for a chance at the World Finals,
the only person you're really trying to beat is yourself.  The goal is to try hard, do a little bit better than last time,
or perhaps learn something that will help you next time.  You can do practice problems on your own, but there's nothing
like a contest to keep you honest.

*** Am I ready for this course?

The only prerequisite is that we assume you know how to program.  We don't even assume you're any good at it... this course
will help with that part.  But if you have programmed in Python, C, or C++ then you are ready for this course.

It does help if you've taken data structures and a theory course... but you can get started now and take those later as you
get stronger.

** Getting Started
:PROPERTIES:
:EXPORT_FILE_NAME: getting-started
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2 :date 2022-08-22 :publishdate 2022-07-01
:END:

*** How Do I Get Started?

  - Join the CampusWire forum.  If you registered before class started, you should have gotten an invite.  If you registered late,
    or did not get the invite, you need to email the instructor.
  - It is recommended that you get these books:
    - [[https://cpbook.net][Competitive Programming 4]].  It is a two book set.
    - [[https://link.springer.com/book/10.1007/978-3-319-72547-5][Guide to Competitive Programming]].  As of this writing the PDF is free.
  - Register a new account on [[https://codeforces.com][Code Forces]].  This is particularly important if you happen to have taken this course before.
    Your username *will be visible* to other students.
    - Once you are registered, join [[https://codeforces.com/group/vXcw3y5Yhn/contests][the class group]].  This is where your problems
      will be hosted.

*** How do I get good at this?

Practice.  A lot.  But do it efficiently...

  - Attend contests as much as you can.
    - [[https://codeforces.com][Code Forces]] has two hour long contests usually once or twice a week, for instance.
    - After the contest is over, read the commentary, both for the problems you solved, and the problems you attempted and could not solve.
    - Upsolve the ones you couldn't do.  (I don't know why they call it upsolving.)  This means that you go back to the computer, finish
      your solution, and submit it until you get it accepted.
  - Solve practice problems
    - This has a similar feel, but in this case it's okay get help.  If you are solving UVa problems you can use the UDebug and UHunt
      sites for extra hints / sample inputs.

** Syllabus
:PROPERTIES:
:EXPORT_FILE_NAME: syllabus
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 3 :date 2022-08-22 :publishdate 2022-07-01
:END:



*** Location and Times

  - Course Title: Introduction to Competitive Programming
  - Rubric: CS 491 CAP
  - CRN: 65816
  - Dates: August 21, 2023 -- December 6, 2023
  - Time: 15:30 -- 14:20
  - Location: 140 Burril Hall
  - Instructor: Mattox Beckman
  - Recommended Textbooks:
     - [[https://cpbook.org][Competitive Programming 4]]
     - [[https://link.springer.com/book/10.1007/978-3-319-72547-5][Guide to Competitive Programming]]
  - Prerequisites: CS 225.  We will use C++ for our content, but you are welcome to use a different language.
  - Office Hours: TBA

*** Purpose

The purpose of this course is to prepare you to compete in ICPC-style competitive programming contests.  While this will help
you compete in the Illinois Programming League, Hacker Rank, Code Forces, or similar contests, learning this material has been shown
to help with programming assignments in other courses, and many students learn this material to become confident and skillful in coding
interviews.

*** Objectives and Outcomes

Upon successfully completing this course, you will have solved over 100 programming problems.  You will have learned to
select the correct algorithm depending on the problem constraints and available time and memory resources.  You will
have learned to implement your solutions quickly and accurately, being given minimal guidance if your solution is
incorrect.  You will have learned to work on your own and in an ICPC style team of students using one computer.  And
hopefully you will have a lot of fun doing so!

*** Class Structure

This is a flipped classroom.  You will be given a reading from the textbook or a short video to watch, and a sample
problem or two to solve before class.  During class the instructor will ask for student comments about the problems and
give commentary.   Afterward, there will be three or so problems as homework, but you will be given class time to start
on them.  You are encouraged to ask for help from other students during the class time!  Once every two weeks we will
release a larger problem set with a variety of problems to give you practice picking the correct algorithm to use.

*** Assignments and Grading

*This course is a Credit/No Credit course, but will be organized as if you were going to receive a letter grade.* To get credit for the course,
you must achieve a C- or better.

There are three components to your grade: attendance, solving problems, and participating in contests or other activities.

**** Attendance

Attendance is required.  Your grade will be reduced by a grade step for every three unexcused absences.  (E.g., An A-
will turn into a B if you have 6 unexcused absences.)

**** Solving Problems

We will calculate the percentage of the problems you solve from the pre-class problems, the homeworks, and the bi-weekly
problem sets.  Each problem has the same weight.

# **** Participation
#
# You are also expected to participate in a certain number of timed contests.  These can be on CodeForces (1 point) or
# hosted by ICPC (2 points for a 5 hour contest).  Other contest sites may also count; ask the instructor for
# pre-approval.  Other activities such as attending a guest lecture or contributing problems to the course problem pool,
# or creating a Team Reference Document can also count toward this requirement.  You are expected to accumulate four
# participation points.  This category is worth 10% of the grade.

*** Other Things
**** Students with Disabilities

To obtain disability-related academic adjustments and/or auxiliary aids, students with disabilities must contact the
course instructor as soon as possible. To insure that disability-related concerns are properly addressed from the
beginning, students with disabilities who require assistance to participate in this class should contact disability
resources and educational services ([[https://www.disability.illinois.edu/)][DRES]] and see the instructor as soon as possible. If you need accommodations for any
sort of disability, please speak to me after class, or make an appointment to see me, or see me during my office hours.
DRES provides students with academic accommodations, access, and support services. To contact DRES you may visit 1207 S.
Oak St., Champaign, call 333-4603 (v/tdd), or e-mail a message to [[mailto:disability@uiuc.edu][disability@uiuc.edu]].

*** Emergency Response Recommendations

The university police have posted some [[http://police.illinois.edu/emergency/][emergency response recommendations]]. I encourage you to review this website and
the campus building [[http://police.illinois.edu/emergency-preparedness/building-emergency-action-plans/][floor plans website]] within the first 10 days of class.

By the way, have you considered making a fire safety plan with your family or roommates?

*** Family Educational Rights and Privacy Act (FERPA)

Any student who has suppressed their directory information pursuant to family educational rights and privacy act (FERPA)
should self-identify to the instructor to ensure protection of the privacy of their attendance in this course. see the
[[http://registrar.illinois.edu/ferpa][FERPA]] site for more information.

*** Mental Health

Diminished mental health, including significant stress, mood changes, excessive worry, substance/alcohol abuse, or
problems with eating and/or sleeping can interfere with optimal academic performance, social development, and emotional
wellbeing. The University of Illinois offers a variety of confidential services including individual and group
counseling, crisis intervention, psychiatric services, and specialized screenings at no additional cost. If you or
someone you know experiences any of the above mental health concerns, it is strongly encouraged to contact or visit any
of the University's resources provided below.  Getting help is a smart and courageous thing to do -- for yourself and
for those who care about you.

Counseling Center: 217-333-3704, 610 East John Street Champaign, IL 61820

McKinley Health Center:217-333-2700, 1109 South Lincoln Avenue, Urbana, Illinois 61801

* Lectures
:PROPERTIES:
:HUGO_SECTION: lectures
:EXPORT_HUGO_SECTION: lectures
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2
:END:

** Lectures
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1 :date 2022-08-22 :publishdate 2022-07-01
:END:

| Date               | Topic                                        |
|--------------------+----------------------------------------------|
| August 21, 2023    | [[*Introduction to Competitive Programming]] |
| August 25, 2023    | [[*Standard Template Library]]               |
| August 28, 2023    | [[*Complete Search]]                         |
| August 30, 2023    | [[*Divide and Conquer]]                      |
| September 1, 2023  | [[*Greedy Algorithms]]                       |
| September 6, 2023  | [[*Introduction to Dynamic Programming]]     |
| September 8, 2023  | [[*Graph Representations]]                   |
| September 11, 2023 | [[*Minimum Spanning Trees]]                  |
| September 13, 2023 | [[*Graph Traversals 1]]                      |
| September 15, 2023 | [[*Single Source Shortest Path]]             |
| September 20, 2023 | [[*All Points Shortest Path]]                |
| September 25, 2023 | [[*Graph Traversals 2]]                      |
| September 27, 2023 | [[*Prime Numbers]]                           |
| October 2, 2023    | [[*GCD]]                                     |
| October 4, 2023    | [[*Inclusion/Exclusion]]                     |
| October 9, 2023    | [[*DP: LCS and LIS]]                         |
| October 11, 2023   | [[*DP: Palindromes]]                         |
| October 13, 2023   | [[*DP: Knapsack]]                            |
| October 16, 2023   | No Class (Senate Meeting)                    |
| October 18, 2023   | [[*Combinatorics]]                           |
| October 20, 2023   | [[*Bit Manipulations]]                       |
| October 23, 2023   | [[*Fast Exponentiation]]                     |
| October 25, 2023   | [[*Catalan Numbers]]                         |
| October 27, 2023   | [[*DP: Knapsack 2]]                          |
| October 30, 2023   | [[*LCA and Binary Lifting]]                  |
| November 1, 2023   | [[*TSP]]                                     |
| November 3, 2023   | [[*Edit Distance]]                           |
| November 6, 2023   | [[*KMP String Matching]]                     |
| November 8, 2023   | [[*Rabin-Karp Algorithm]]                    |
| November 10, 2023  | [[*Sqrt Decomposition]]                      |
| November 13, 2023  | No Class (Senate Meeting)                    |
| November 15, 2023  | [[*Segment Trees]]                           |
| November 17, 2023  | Fall Break Preview                           |
| November 27, 2023  | [[*Lazy Segment Trees]]                      |
| November 29, 2023  | [[*Points, Lines, and Vectors]]              |
| December 1, 2023   | [[*Shapes]]                                  |
| December 4, 2023   | [[*Convex Hull]]                             |
| December 6, 2023   | Line Sweep                                   |

** Template
:PROPERTIES:
:EXPORT_FILE_NAME: template
:EXPORT_DATE: 2023-03-06
:END:

** Introduction to Competitive Programming
:PROPERTIES:
:EXPORT_FILE_NAME: introduction_to_competitive_programming
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 4 :date 2022-08-22 :publishdate 2022-07-01
:END:

Welcome to Competitive Programming!  Today we will talk about the benefits of competitive programming, the course structure, and the tools we will
use in the course.

*** Slides
- [[/slides/course-introduction.pdf][Course Introduction Slides]]

*** Judge Links
  - Register on [[https://codeforces.com][Code Forces]].  Your username **will be visible** to other students; you can create a "throwaway"
    account if you want just for this course.
    - Once you are registered, join [[https://codeforces.com/group/vXcw3y5Yhn/contests][the class group]].  This is where your problems will be hosted.
    - Use this [[https://docs.google.com/forms/d/e/1FAIpQLScdDVbkZSqkwEiznyKp_NlCwp0ZRZbOiPfidqcb9Zhi7p_GuQ/viewform?usp=sf_link][google form]] to record your username.

** Standard Template Library
:PROPERTIES:
:EXPORT_FILE_NAME: standard_template_libaray
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 4 :date 2022-08-22 :publishdate 2022-07-01
:END:

Today we will discuss the standard template library for C++.  You don't have to use this for your own
programming, but we will use it in our examples so you should know how it all works.

We will cover:
 - C-Style arrays
 - Vectors
 - Pairs
 - Stacks and Queues
 - Maps and Sets

We will not cover =priority_queue=, but you may want to look at those as well on your own.

*** Slides
- [[/slides/standard-template-library.pdf][STL Slides]]

** Complete Search
:PROPERTIES:
:EXPORT_FILE_NAME: complete_search
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 4 :date 2022-08-22 :publishdate 2022-07-01
:END:

Also known as "brute force"; this paradigm happens when there's nothing to do but check all the possible solutions.

BUT!!!  That doesn't mean that you can't be clever how you do it.

*** Slides
- [[/slides/complete-search.pdf][Complete Search Slides]]

** Divide and Conquer
:PROPERTIES:
:EXPORT_FILE_NAME: divide_and_conquer
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 5 :date 2022-08-22 :publishdate 2022-07-01
:ID:       99caeb59-31db-4e9d-a2cd-7c905eddedc0
:END:

Divide and Conquer is an algorithmic strategy that involves breaking a complex problem  into smaller, more manageable
sub-problems. There are three steps: "Divide" the problem into smaller instances, "Conquer" these instances
(either by solving them directly or recursively applying the strategy), and then "Combine" the solutions of these
sub-problems to form the solution for the original problem.

A classic example of this approach is the Merge Sort algorithm: the array is divided into two halves, each half is
recursively sorted, and then the two sorted halves are merged together.

*** Slides
- [[/slides/divide-and-conquer.pdf][Divide and Conquer Slides]]

** Greedy Algorithms
:PROPERTIES:
:EXPORT_FILE_NAME: greedy_algorithms
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 6 :date 2022-08-22 :publishdate 2022-07-01
:ID:       536a6476-b1c4-4dd7-b720-44a06977ecf4
:END:

A Greedy Algorithm is a problem-solving approach that makes a locally optimal choice at each step.  There is a class of
problems where this approach also yields the globally optimum solution.

Classic examples include the coin change problem (under certain circumstances), activity selection, and certain
scheduling problems.

*** Slides
- [[/slides/greedy-algorithms.pdf][Greedy Algorithms Slides]]


** Introduction to Dynamic Programming
:PROPERTIES:
:EXPORT_FILE_NAME: dynamic_programming
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 7 :date 2022-08-22 :publishdate 2022-07-01
:ID:       3ed6c54b-200a-4a1f-b20b-3953698f305b
:END:

Greedy algorithms are fun, but sometimes you need more power than what they can give you.  Like Greedy problems, Dynamic Programming (DP)
problems have overlapping optimal substructure.  Unfortunately, what is often the best local choice can end up *not* giving you the best
global solution.  Dynamic programming allows us to take advantage of the overlapping substructure property to speed up the search.

*** Slides
- [[/slides/dynamic-programming.pdf][Dynamic Programming Slides]]

** Graph Representations
:PROPERTIES:
:EXPORT_FILE_NAME: graph_representations
:EXPORT_DATE: 2023-02-13
:ID:       ca2dbeb0-083d-4f98-95ad-c429bf32bae9
:END:

*** Slides
- [[/slides/graph-representation.pdf][Graph Representation Slides]]

** Minimum Spanning Trees
:PROPERTIES:
:EXPORT_FILE_NAME: minimum_spanning_trees
:EXPORT_DATE: 2023-02-20
:ID:       f187cfce-4357-4fa8-89dd-8ef15ad7a0eb
:END:

Sometimes you want to connect a graph and minimize the cost of the connections without regard to the length of a path
between any particular two noted.  These are called /Minimum Spanning Trees/.

*** Slides

- [[/slides/minimum-spanning-trees.pdf][Minimum Spanning Trees]]
- [[/slides/kruscals-algorithm.pdf][Kruscal's Algorithm]]

** Graph Traversals 1
:PROPERTIES:
:EXPORT_FILE_NAME: graph_traversals_1
:EXPORT_DATE: 2023-02-24
:ID:       5c13742e-38e0-4436-8d7b-426af1f28ee5
:END:

We will cover the baseic traversals of DFS and BFS and talk about what we can do with them
in the context of competitve programming.


*** Slides

- [[/slides/graph-traversals-1.pdf][Graph Traversals 1]]

** Graph Traversals 2
:PROPERTIES:
:EXPORT_FILE_NAME: graph_traversals_2
:EXPORT_DATE: 2023-03-06
:END:


You know about BFS and DFS already, but it turns out they are capable of revealing other interesting properties of
graphs.  We will show how to use these traversals to detect if a graph is bipartite (yet another way....) and find
cycles, SCCs, cut edges, and cut nodes.

*** Slides

-  [[/slides/graph-traversals-2.pdf][Graph Traversals 2]]


** Single Source Shortest Path
:PROPERTIES:
:EXPORT_FILE_NAME: single_source_shortest_path
:EXPORT_DATE: 2023-02-20
:ID:       4e09691a-8f1a-4fd3-8b5c-f75251bcb105
:END:

Normally we would talk about traversals, but at this point you probably are okay with BFS and DFS.  So to speed things up,
we will talk about using those traversals to find the shortest path
*** Slides

- [[/slides/bfs-shortest-path.pdf][BFS Shortest Path]]
- [[/slides/dijkstra-shortest-path.pdf][Dijkstra's Shortest Path Algorithm]]
- [[/slides/bellman-ford-and-spfa.pdf][Bellman Ford and SPFA]]


** All Points Shortest Path
:PROPERTIES:
:EXPORT_FILE_NAME: all_points_shortest_path
:EXPORT_DATE: 2023-02-20
:ID:       68db99bd-53c6-4425-aa45-c37d63573504
:END:

The Floyd-Warshall algorithm is a dynamic programming technique used in competitive programming to find the shortest
paths between all pairs of vertices in a weighted, directed graph. Unlike Dijkstra's and Bellman-Ford's algorithms,
which focus on single-source shortest paths, Floyd-Warshall efficiently computes the shortest paths for every vertex
pair simultaneously.  Due to its $O(V^3)$ time complexity, it's best suited for graphs with a relatively small number of
vertices, typically when $ V \leq 400 $ in most competitive scenarios.

*** Slides

- [[/slides/floyd-warshall.pdf][Floyd Warshall]]

** Traversals 2
:PROPERTIES:
:EXPORT_FILE_NAME: traversals_2
:EXPORT_DATE: 2023-02-24
:ID:       5c13742e-38e0-4436-8d7b-426af1f28ee5
:END:

You know about BFS and DFS already, but it turns out they are capable of revealing other interesting properties of
graphs.  We will show how to use these traversals to detect if a graph is bipartite (yet another way....) and find
cycles, SCCs, cut edges, and cut nodes.

*** Slides

- [[/slides/traversals-2.pdf][Traversals 2]]


** Network Flow
:PROPERTIES:
:EXPORT_FILE_NAME: network_flow
:EXPORT_DATE: 2023-02-27
:ID:       0422089d-5d4e-4d32-bed1-d0a4dfb47870
:END:

The Edmonds-Karp algorithm is a popular and efficient algorithm used to solve the max-flow problem in network flow
theory. This algorithm is an extension of the Ford-Fulkerson algorithm, which is a simple algorithm for finding the
maximum flow in a network. The Edmonds-Karp algorithm uses a breadth-first search approach to find the shortest
augmenting path in the residual graph, making it faster and more efficient than the original Ford-Fulkerson algorithm.

*** Slides

- [[/slides/edmonds-karp.pdf][Edmonds Karp]]

** Prime Numbers
:PROPERTIES:
:EXPORT_FILE_NAME: prime_numbers
:EXPORT_DATE: 2023-03-01
:ID:       d621ddd6-0b6d-4175-b474-314799ed46ae
:END:

Prime numbers are a familiar feature in mathematics, and often come up in competitive programming.  In this lecture
we will derive the Sieve of Erastosthenes, show how to factor large numbers, and discuss the practical limits to the
number of prime numbers we can generate during a contest.

*** Slides

- [[/slides/prime-numbers.pdf][Prime Numbers]]


** Combinatorics
:PROPERTIES:
:EXPORT_FILE_NAME: combinatorics
:EXPORT_DATE: 2023-03-06
:ID:       d9bf37b1-8c13-4984-8448-adbf6f692b48
:END:

Combinatorics is the branch of mathematics that deals with counting and arranging objects.  We will cover some of the
fundamental concepts in combinatorics, including binomial coefficients, permutations, and derangements.

Binomial coefficients, also known as binomials, are a tool for counting the number of ways that a given set of objects
can be arranged or selected. We will explain how to calculate binomial coefficients  to model different scenarios such
as flipping coins or selecting items from a set.

A permutation is a reordering of a set of items.  We will explain how to count the number of permutations and how to
generate all the permutations of a given set. Derangements are permutations where no element appears in its original
position.  We will examine how to calculate the number of derangements for a set and discuss its applications.

*** Slides

- [[/slides/combinatorics.pdf][Combinatorics]]


** GCD
:PROPERTIES:
:EXPORT_FILE_NAME: GCD
:EXPORT_DATE: 2023-03-08
:ID:       f118cc9f-89b0-4a60-92e7-ed16708011fb
:END:

GCD, or Greatest Common Divisor, is a mathematical concept that refers to the largest positive integer that divides two or more numbers without leaving a remainder.

In class we will derive Euclid's algorithm, an efficient way of computing GCD, as well as explore some of the properties of GCD you will want to know when solving
competitve programming problems.

*** Materials

- [[/handouts/gcd.pdf][GCD Handout]]

** Inclusion/Exclusion
:PROPERTIES:
:EXPORT_FILE_NAME: inclusion_exclusion
:EXPORT_DATE: 2023-03-08
:ID:       f118cc9f-89b0-4a60-92e7-ed16708011fb
:END:

The principle of inclusion/exclusion is a counting technique used to calculate the size of a union of sets. It states that:

$|A \cup B \cup C| = |A| + |B| + |C| - |A \cap B| - |B \cap C| - |A \cap C| + |A \cap B \cap C|$

where $A$, $B$, and $C$ are any finite sets.

In other words, to find the size of the union of three sets $A$, $B$, and $C$, you first add the sizes of each set
individually, then subtract the sizes of the overlaps $(A \cap B, B \cap C$, and $A \cap C$), and finally add the size of the
triple overlap $(A \cap B \cap C)$.

This principle can be extended to any number of sets, and is a useful tool in combinatorics, probability theory, and
other areas of mathematics.

*** Materials

- [[/slides/inclusion-exclusion.pdf][Inclusion-Exclusion Slides]]

** DP: LCS and LIS
:PROPERTIES:
:EXPORT_FILE_NAME: dp_lcs_and_lis
:EXPORT_DATE: 2023-03-06
:END:

Two related problems are /Longest Common Subsequence/ and /Longest Increasing Subsequence/. We can solve both of these
using a standard DP pattern.

*** Slides
:PROPERTIES:
:CUSTOM_ID: slides
:END:
- [[/slides/dp-lcs-lis.pdf][DP: LCS and LIS]]

** DP: Palindromes
:PROPERTIES:
:EXPORT_FILE_NAME: dp_palindromes
:EXPORT_DATE: 2023-03-06
:END:
A palindrome is a string that is the same after being reversed. We can
detect palindromes quickly using dynamic programming.

*** Slides
:PROPERTIES:
:CUSTOM_ID: slides
:END:
- [[/slides/palindrome-slides.pdf][Palindrome Slides]]
- [[/handouts/dp-palindromes.pdf][Palindrome Handout]]

** DP: Knapsack
:PROPERTIES:
:EXPORT_FILE_NAME: dp_knapsack
:EXPORT_DATE: 2023-03-06
:END:
The Knapsack problem is famous. How to fill a sack with items that are
of maximal value without breaking the sack?

*** Slides

- [[/slides/dp-knapsack.pdf][DP: Knapsack]]


** DP: Knapsack 2
:PROPERTIES:
:EXPORT_FILE_NAME: dp_knapsack_2
:EXPORT_DATE: 2023-03-06
:END:
The Knapsack problem is famous. How to fill a sack with items that are of maximal value without breaking the sack?

Last class we discussed how to do this using a classic algorithm. This time we will combine dynamic programming with
divide and conquer to make a truly fast version that can solve knapsack with repetitions.

*** Slides
- [[/slides/dp-knapsack-2.pdf][DP: Knapsack]]
- [[/code/knapsack2.cpp][source code]]

** LCA and Binary Lifting
:PROPERTIES:
:EXPORT_FILE_NAME: template
:EXPORT_DATE: 2023-03-06
:END:
Many algorithms, such as cycle detection, need us to be able to find the least common ancestor of two nodes. Here is a
fast way to do that making use of a technique called /binary lifting/.

*** Slides
- [[/slides/lca-binary-lifting.pdf][LCA and Binary Lifting]]


** TSP
:PROPERTIES:
:EXPORT_FILE_NAME: tsp
:EXPORT_DATE: 2023-03-06
:END:

The Traveling Salesperson Problem (TSP) is a well-known problem in computer science and operations research that asks
for the shortest possible route that visits every city exactly once and returns to the starting city. TSP has many
practical applications, including in logistics, transportation planning, and circuit board design.

*** Materials
- [[/handouts/tsp-handout.pdf][Handout]]
- [[/slides/tsp.pdf][Slides]]


** Bit Manipulations
:PROPERTIES:
:EXPORT_FILE_NAME: bit_manipulations
:EXPORT_DATE: 2023-03-20
:ID:       d7d4e811-1f15-42ca-b44c-fd51153aa8e1
:END:

There are a lot of things you can do using bit-level operations that will speed things up for you.
For example you can check quickly if a number is a power of 2, reveal the lest significant bit, or
zero out a high order or low order part of an integer if you know the proper bit patterns to use.

If you like this lecture, then you may want to check out the book [[https://en.wikipedia.org/wiki/Hacker%27s_Delight][Hacker's Delight]]

*** Materials

- [[/slides/bit-manipulations.pdf][Slides]]

** Traveling Sales Person
:PROPERTIES:
:EXPORT_FILE_NAME: tsp
:EXPORT_DATE: 2023-03-22
:ID:       d7d4e811-1f15-42ca-b44c-fd51153aa8e1
:END:

The Traveling Salesperson Problem (TSP) is a well-known problem in computer science and operations research that asks
for the shortest possible route that visits every city exactly once and returns to the starting city.  TSP has many
practical applications, including in logistics, transportation planning, and circuit board design.

*** Materials

- [[/handouts/tsp-handout.pdf][Handout]]
- [[/slides/tsp-slides.pdf][Slides]]

** Fast Exponentiation
:PROPERTIES:
:EXPORT_FILE_NAME: fast_exponentiation
:EXPORT_DATE: 2023-03-24
:ID:       71052961-1628-496c-b36d-7e223977c62d
:END:

Exponents are fun, but using bit techniques we covered last time we can compute them significantly faster than the standard technique.
This generalizes to other forms as well, such as computing Fibonacci numbers is sub-linear time.

*** Materials

- [[/slides/fast-exponentiation.pdf][Slides]]

** Points, Lines, and Vectors
:PROPERTIES:
:EXPORT_FILE_NAME: points_lines_vectors
:EXPORT_DATE: 2023-03-27
:ID:       bd6ab2e0-c715-428f-a055-5e8cc58708d2
:END:

*** Materials

- [[/slides/points-lines-vectors.pdf][Slides]]


** Convex Hull
:PROPERTIES:
:EXPORT_FILE_NAME: convex_hull
:EXPORT_DATE: 2023-04-05
:ID:       f657176f-7340-44a7-a89e-401799e08e6b
:END:

*** Materials
- [[/slides/convex-hull.pdf][Slides]]
- [[*Area of Polygon]] Video
- [[*Convex Hull Video]]

** Line Sweep
:PROPERTIES:
:EXPORT_FILE_NAME: line_sweep
:EXPORT_DATE: 2023-04-05
:END:

*** Materials

- [[*Line Sweep Convex Hull]] Video
- [[*Line Sweep Closest Points]] Video
- [[*Line Sweep Area of Union]] Video


** Rotating Calipers
:PROPERTIES:
:EXPORT_FILE_NAME: rotating_calipers
:EXPORT_DATE: 2023-04-07
:ID:       1ce51bbb-8fe0-49ba-9855-ca24018b2ec4
:END:

#+begin_src c++ -n
function dist(p1,p2,p) {

  var A = p.x - p1.x;
  var B = p.y - p1.y;
  var C = p2.x - p1.x;
  var D = p2.y - p1.y;

  var dot = A * C + B * D;
  var len_sq = C * C + D * D;
  var param = -1;
  if (len_sq != 0) //in case of 0 length line
      param = dot / len_sq;

  var xx, yy;

  if (param < 0) {
    xx = p1.x;
    yy = p1.y;
  }
  else if (param > 1) {
    xx = p1.x;
    yy = p1.y;
  }
  else {
    xx = p1.x + param * C;
    yy = p1.y + param * D;
  }

  var dx = p.x - xx;
  var dy = p.y - yy;
  return Math.sqrt(dx * dx + dy * dy);
}

// Rotating Calipers Code

vector<point> p;

int n; // number of points

typedef pair<point,point> pp;

set<pp> antipodes;

int k=1;

while (dist(p[n-1],p[0],p[k+1]) > dist(p[n-1],p[1],p[k])
    ++k;

int i=1;
int j=k;

while (i <= k && j < n) {
  antipodes.add(pp(p[i],p[k]));
  while (dist(p[i],p[i+1],p[j+1]) > dist(p[i],p[i+1],p[j]) && j<m) {
     antipodes.add(pp(p[i],p[j]));
     ++j;
  }
  ++i;
}
#+end_src

** Edit Distance
:PROPERTIES:
:EXPORT_FILE_NAME: edit_distance
:EXPORT_DATE: 2023-04-05
:ID:       2c33e2fd-ca45-4ff0-9b90-57ea4a3ace76
:END:

Today we will talk about a classic string DP problem, determining the edit distance between two strings.

*** Materials

- [[/slides/edit-distance-slides.pdf][Slides]]
- [[*Edit Distance Video]]


** KMP String Matching
:PROPERTIES:
:EXPORT_FILE_NAME: kmp
:EXPORT_DATE: 2023-03-06
:END:

*** Materials

- [[/slides/kmp.pdf][Slides]]
- [[*Naive Matching Video]]
- [[*KMP Matching Video]]

** Rabin-Karp Algorithm
:PROPERTIES:
:EXPORT_FILE_NAME: rabin_karp
:EXPORT_DATE: 2023-04-14
:ID:       8893391c-2a87-46fa-9d06-bf1ed32ae344
:END:

The Rabin-Karp algorithm is another fast string matching technique.  It uses a rolling hash function to find a string within another string.

*** Materials

- [[/slides/rabin-karp.pdf][Slides]]

** Catalan Numbers
:PROPERTIES:
:EXPORT_FILE_NAME: catalan_numbers
:EXPORT_DATE: 2023-03-06
:ID:       a30b5140-77eb-4ae5-aad2-695c0a0b867d
:END:

The catalan numbers are a sequence that describe a large number of recursive problems. For example, they can count the
number of ways to arrange a group of open and close parethesis so that they are properly balanced.

*** Slides
- [[/slides/catalan-numbers.pdf][Combinatorics]]


** Sqrt Decomposition
:PROPERTIES:
:EXPORT_FILE_NAME: sqrt-decomposition
:EXPORT_DATE: 2023-03-06
:END:



*** Slides
- [[/slides/sqrt-decomposition.pdf][Slides]]


** Segment Trees
:PROPERTIES:
:EXPORT_FILE_NAME: segment-trees
:EXPORT_DATE: 2023-03-06
:ID:       e31c6f06-1a5a-4747-bba1-daee18c903c3
:END:

A Segment Tree is a data structure to encode the results of divide and conquer.  It is similar to sqrt-decomposition but more "recursive."

*** Slides
- [[/slides/segment-trees.pdf][Slides]]

** Lazy Segment Trees
:PROPERTIES:
:EXPORT_FILE_NAME: lazy-segment-trees
:EXPORT_DATE: 2023-03-06
:ID:       26c13b81-e51c-4212-85eb-77c987df39e1
:END:

This time we allow for "instructions" to be kept in the nodes that express an operation to be done to all the elements under it.
This allows not only queries, but updates to be done in ${\cal O}(\log_2 n)$ time.

*** Slides
- [[/slides/lazy-segment-trees.pdf][Slides]]

** Shapes
:PROPERTIES:
:EXPORT_FILE_NAME: shapes
:EXPORT_DATE: 2023-03-06
:ID:       129c7379-8101-4e7c-94cc-f22c6704f351
:END:

Here are some shapes that you may find in competitive program and the formulae you need to work with them.

*** Slides
- [[/slides/shapes.pdf][Slides]]
  
* End :noexport:
;; Local Variables:
;; eval: (org-link-set-parameters "class" :export #'my-org-export-class-link)
;; End:
